内容　mvcモデル
振り返りメモ
mvcモデル（Model view Controller)の略でプログラムの役割ごとに３に分けて管理するソフトウェア設計モデルのこと

リクエストとレスポンスがあり、その間にインターネットのゲートウェイがありwebであればhttpというプロトコル両者を通信してるhtmlとモデルとデータベースに作業分担ができる。

コントローラとはクライアントから何らかのリクエスト（命令）が来た時にどうするか判断してる。
中身を処理をしてるかではなく、どの部門にどのように処理させるかを制御する。指揮官みたいなもの

レスポンスによってことなる
例indexでmvcに入るmvcの中の情報を取り出してほしいなこういう要求を引き受けるのがコントローラ
コントローラは受けた情報取り出してviewにこの情報を整えなさいと命令し送り返す
なにも情報を加えなかったら静的データベース　その逆が動的データベース

viewはあくまで見かけを作ってるだけであり、中身までは手が及んでない
中身データベースからidとパスワードからとってきてそれが正しいかどうかが判断できない
見た目をつくるのは”view”だがどういう情報を置くのかは”モデル”が決める

データベースはなぜ独立するのか

今回の動くものをつくるためにセキュリティのことばかりを考えない、データベース構造について悩むこと重要な機能を優先して作ろうたとえばパスワード管理とか

同時にアクセスされたとき情報の調整しないとだめだからセッション管理がひつようになる
やり取りを保存するやり方はインターネットにはないハイパーテキスト

ハリデーしょん

まとめ
mvcモデル（Model view Controller)はプログラムの役割事に３に分けて開発を行うという考え方　web開発によく用いられるらしい

modelとは、アプリで実装したい処理をまとめたクラス 
viewとは、結果を画面に表示したり、入出力を行ったりする

　ブラウザ　モデル　データベースで作業が分担される。これらは要求された命令は”コントローラ”によりどの部分に割り当てられるか制御されている

流れ
①クライアントが送った命令をコントローラが受け取る
　　　　　　↓
②コントローラがmodelに処理の実行を指示
　　　　　　↓
③コントローラがviewに表示の実行を指示
　　　　　　↓
④viewが画面に表示(レスポンス）


コントローラが命令を受けて情報を読み込んでviewが整えて送り返すここでviewが手が加える箇所が少なかったら”静的データベース”　逆に手を加える箇所が多かったら”動的データベース”

viewは見かけだけで中身までは手が及ばないため必要な情報なのかまでは判断できない、その役割を果たすのは”モデル”